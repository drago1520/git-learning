git stash 
git stash list
git stash pop - –ø–æ—Å–ª–µ–¥–Ω–æ—Ç–æ –º–∞—Ö–∞ (–ù–µ –µ –¥–æ–±—Ä–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞)
–î–æ–±—Ä–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞:
git stash apply <—á–∏—Å–ª–æ>
git stash drop <—á–∏—Å–ª–æ> 

git status 

UNDO after commit & Unstage:

git restore <–∏–º–µ –Ω–∞ —Ñ–∞–π–ª> - –≤—Ä—ä—â–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—è commit
git restore --staged <–∏–º–µ –Ω–∞ —Ñ–∞–π–ª> - –º–∞—Ö–∞ –æ—Ç staging area.

Log commits [EASY]:
git log --oneline

Compare changes:

git diff 
git diff [first commit] [second commit]

Branches:
git branch - –∫–∞—Ç–æ git log (-v detailed info for all branched)

git fetch --all
git branch -r - –í–∏–∂ remote branches

git branch <branchName> - –Ω–æ–≤ –∫–ª–æ–Ω

git checkout <main branch to merge>
git merge <secondary branch to merge>

git branch -d <branch> - Delete branch (-D = force)
git push origin --delete <branch> - Delete branch remotely

git branch -M <branch> - rename branch

Pull:
git checkout <branch> - –≤ –∫–æ—è –ª–æ–∫–∞–ª–Ω–∞ —â–µ –¥—ä—Ä–ø–∞–º
git pull origin <remote branch> - –æ—Ç –∫–æ—è —â–µ –¥—ä—Ä–ø–∞–º

*--allow-unrelated-histories - fatal: refusing to merge unrelated histories

Merge:
git checkout <main branch to merge>
git merge <secondary branch to merge>

git branch --merged
git branch --no-merged - –°—Ç–æ–∏ —Å–∏ –±–µ–∑ –¥–∞ —Å–µ –∏–∑–ø–æ–ª–≤–∞. –¢—Ä—è–±–≤–∞ –¥–∞ —è –ø—Ä–∏—Å—ä–µ–¥–∏–Ω—è

Shortcuts:
git add .
git commit -m "<Detailed commit message>"
vs
git commit -am "<Detailed commit message>" - ONLY if already tracked, i.e. made at least once with git add .

git branch <branch>
git checkout <branch>
vs
git checkout -b <branch>

Connect remote repo:

git remote add origin main - 
git push -u origin main - -u –ó–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ –ø—ä—Ä–≤–∏—è –ø—ä—Ç. –ó–∞–ø–æ—á–≤–∞ –¥–∞ —Å–ª–µ–¥–∏ upstream dx!

Squash:
git rebase -i <commit/ relative HEAD~#> - —Ç—Ä—è–±–≤–∞ hash –ø—Ä–µ–¥–∏ –ø—ä—Ä–≤–∏—è squash.

Come to a commit WITHOUT altering history:
git revert <commit/ relative HEAD~#> - –∫–æ–π –¥–∞ –∏–∑—Ç—Ä–∏–µ?

Delete/ Change commits:
NB! –ü—Ä–∞–≤–∏ –≤—Å–∏—á–∫–æ —Å–ª–µ–¥ –¥–∞–¥–µ–Ω–∏—è commit –∏ –Ω–∞ –¥—Ä—É–≥–∏—Ç–µ commit-–∏!!!!!

git reset --soft <commit hash*/ HEAD~#> - –æ—Ç commit --> staging (–ù–µ –º–∞—Ö–∞ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ, –Ω–æ –º–µ—Å—Ç–∏ –∫—ä–º staging –∏ –º–∞—Ö–∞ commit-a)

git reset --mixed <commit hash*/ HEAD~#> 
–∏–ª–∏ git reset <commit hash*/ HEAD~#> - –æ—Ç commit --> unstaged (–ø—Ä–æ–º–µ–Ω–∏—Ç–µ –≤—Å–µ –æ—â–µ –≥–∏ –∏–º–∞)

git reset --hard <commit hash*/ HEAD~#> - —Ç—Ä–∏–µ –≤—Å–∏—á–∫–æ —Å–ª–µ–¥ –¥–∞–¥–µ–Ω–∏—è commit!!!

*—Ç—Ä—è–±–≤–∞ commit hash –ø—Ä–µ–¥–∏ commit-a, –∫–æ–π—Ç–æ –∏—Å–∫–∞—à

Tag/ Version:
git tag <tag name> - tag the recent commit
git tag <tag name> <commit> - tag any commit

git tag --list

git tag -d <tag name>
git push origin <tag name>

Checkout:
git checkout <commit/ tag name/ HEAD~#> - –¥–∞ –≤–∏–¥–∏—à –∫–∞–∫–≤–æ –µ –±–∏–ª–æ; –ü—Ä–∏ –Ω–æ–≤ commit —â–µ —Ä–∞–∑—Ä—É—à–∏ –Ω–æ–≤–∏—Ç–µ, –∫–∞—Ç–æ –ø—Ä–∞–≤–∏ –Ω–æ–≤ timeline

git checkout <branch>

Delete in online repo:
git push origin <branch> -f - FORCE PUSH!!!

Clone & Fork:
fork from GUI
don't touch main branch --> create a new one for the feature!
git clone <HTTPS> - it has the remote repo connected!
pull request to original repo from GUI

git remote rm origin

git remote - –∫–∞—Ç–æ log, –Ω–æ –∫—ä–º –∫–æ–∏ remote —Å—ä–º —Å–µ —Å–≤—ä—Ä–∑–∞–ª

README.md - Project:
Project information
Screenshots
üñ•Docs
API references
Tech Stack
Installation process
Deployment process

README.md - Personal:
Current Working
Current Learning
Social Media Profiles
Blog Post
Languages & Tools
Github Analytics
Publications
Side Projects
This looks like a navi

Resources:
ICONS - shields.io & simpleicons.org